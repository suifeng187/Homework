package swu.dxq;

import java.io.*;
import java.net.URL;
import java.util.ArrayList;

public class Test1 {
    public static void main(String[] args) throws Exception {
        //将网络txt文件传到文本文件中
        URL url = new URL("http://10.122.7.154/javaweb/data/images-url.txt");
        File fileNet = new File("D:\\javacode\\projectHomework\\src\\path.txt");
        InputStream is = url.openStream();
        OutputStream os = new FileOutputStream(fileNet);
        byte[] buffer = new byte[1024];
        int lenN;
        while ((lenN = is.read(buffer)) != -1) {
            os.write(buffer, 0, lenN);
        }
        is.close();
        os.close();
        //创建一个list对象存储链接
        ArrayList<String> list = new ArrayList();
        try (
                //创建一个管道与源文件接通
                Reader fr = new FileReader("src\\path.txt");
                BufferedReader br = new BufferedReader(fr);
        ) {
            //按行读取文件内容
            for (int i = 0; i < 5; i++) {
                list.add(br.readLine());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        //打印获取文件路径的列表
        for (int i = 0; i < 5; i++) {
            System.out.println(list.get(i));
        }
        //c盘根目录下创建文件夹images以及后续文件，放在dirName中
        ArrayList<String> dirName = new ArrayList<>();
        //根据url路径解析创建文件夹路径
        for (int i = 0; i < 5; i++) {
            //将分割后的字符串放入String中
            String[] PATH = list.get(i).split("/");
            //将字符串拼接成路径
            String dirName0 = PATH[2] + "/" + PATH[3] + "/" + PATH[4] + "/";
            //将路径加入dirName列表
            dirName.add(dirName0);
        }
        //分别创建五个多级文件夹
        for (int i = 0; i < 5; i++) {
            File dir = new File("C:/images/" + dirName.get(i));
            dir.mkdirs();
        }
        //在对应目录下下载图片
        for (int i = 0; i < 5; i++) {
            imagesDownload(list.get(i), "C:/images/" + dirName.get(i));
        }
        //比较图片大小并排序
        //先获取每张图片的字节数，并将结果存储到一个size数组中方便后续排序
        long[] size = new long[5];
        for (int i = 0; i < 5; i++) {
            size[i]=imagesize("C:/images/" + dirName.get(i)+"01.jpg");
        }
        //使用冒泡排序对字节大小排序
        int j, k;
        long temp;
        for (j = 0; j < 4; j++) {
            for (k = 0; k < 4 - j; k++) {
                if (size[k] < size[k + 1]) {
                    temp = size[k];
                    size[k] = size[k + 1];
                    size[k + 1] = temp;
                }
            }
        }
        //创建images-sort.txt文件，将结果录入
        Writer fw = new FileWriter("C:/images/images-sorted.txt", true);
        for (int i = 0; i < 5; i++) {
            fw.write(size[i] + "    ");
            for (int l = 0; l < 5; l++) {
                if (size[i] == imagesize("C:/images/" + dirName.get(l)+"01.jpg")) {
                    fw.write(list.get(l));
                }
            }
            fw.write("\r\n");
        }
        fw.flush();//刷新流，必须写，不然数据无法写入文件
    }

    public static long imagesize(String path) {
        File f1 = new File(path);
        return f1.length();
    }

    public static void imagesDownload(String path, String dir) throws Exception {
        //创建URL对象
        URL url = new URL(path);
        //创建输入流
        InputStream in = url.openStream();
        //保存读取来的具体数据的字节数组
        byte data[] = new byte[1024];
        //保存读取来的字节数
        int len = 0;
        //创建内存输出流对象
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        //读取数据
        while ((len = in.read(data)) != -1) {
            out.write(data, 0, len);
        }
        File file = new File(dir + File.separator + "01.jpg");
        FileOutputStream fileout = new FileOutputStream(file);
        fileout.write(out.toByteArray());
        fileout.close();
        out.close();
        in.close();
    }
}
